{"version":3,"sources":["main.js","components/test.js"],"names":["state","user","playlist","httpGetAsync","theUrl","callback","httpRequest","XMLHttpRequest","onreadystatechange","readyState","status","data","responseText","open","send","httpPostAsync","payload","setRequestHeader","JSON","stringify","kendall_user","kendall_playlist","sam_user","getUserPlaylists","updateUserPlaylistsView","parse","items","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","push","id","name","err","return","updateMainView","join","getPlaylistSongs","playlistId","updatePlaylistSongsView","updateInitialView","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","song","console","log","messinaId","description","setPlaylistSongs","content","document","querySelectorAll","innerHTML","playSong","songId","iframe"],"mappings":"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","file":"main.min.js","sourcesContent":["let state = {\n  user: '',\n  playlist: ''\n}\n\nfunction httpGetAsync(theUrl, callback) { //theURL or a path to file\n  var httpRequest = new XMLHttpRequest();\n  httpRequest.onreadystatechange = function() {\n    if (httpRequest.readyState == 4 && httpRequest.status == 200) {\n      var data = httpRequest.responseText;  //if you fetch a file you can JSON.parse(httpRequest.responseText)\n      if (callback) {\n        callback(data);\n      }                   \n    }\n  };\n\n  httpRequest.open('GET', theUrl, true); \n  httpRequest.send(null);\n}\n\n\nfunction httpPostAsync(theUrl, payload, callback) { //theURL or a path to file\n  var httpRequest = new XMLHttpRequest();\n  httpRequest.onreadystatechange = function() {\n    if (httpRequest.readyState == 4 && httpRequest.status == 200) {\n      var data = httpRequest.responseText;  //if you fetch a file you can JSON.parse(httpRequest.responseText)\n      if (callback) {\n        callback(data);\n      }                   \n    }\n  };\n\n  httpRequest.open('POST', theUrl, true); \n  httpRequest.setRequestHeader('Content-Type', 'application/json');\n  httpRequest.send(JSON.stringify({payload: payload}));\n}\n\nconst kendall_user = 'kwatch90210';\nconst kendall_playlist = '2nrEA3uA0oD23f5KuRUu7u';\n\nconst sam_user = 'smessina';\n\n\nlet getUserPlaylists = (user) => {\n  switch(user) {\n    case 'sam':\n      user = sam_user;\n      break;\n    case 'kendall':\n      user = kendall_user;\n      break;\n    default:\n      break\n  }\n  state.user = user;\n  httpGetAsync(`/playlists?userId=${user}`, function(data) {\n    updateUserPlaylistsView(JSON.parse(data).items);\n  });\n}\n\nlet updateUserPlaylistsView = (data) => {\n  let items = [`<button onclick=\"updateInitialView()\">Back</button>`];\n  for (let playlist of data) {\n    items.push(`<p class=\"clickable\" onclick=\"getPlaylistSongs('${playlist.id}')\">${playlist.name}</p>`);\n  }\n  updateMainView(items.join(''));\n}\n\n\nlet getPlaylistSongs = (playlistId) => {\n  state.playlist = playlistId;\n\n  httpGetAsync(`/playlist?userId=${state.user}&playlistId=${playlistId}`, function(data) {\n    updatePlaylistSongsView(JSON.parse(data).items);\n  });\n}\n\nlet updateInitialView = () => {\n  updateMainView(`\n       <button onclick=\"getUserPlaylists('sam')\">Sam</button>\n       <button onclick=\"getUserPlaylists('kendall')\">Kendall</button>\n  `);\n}\n\nlet updatePlaylistSongsView = (data) => {\n  let items = [`<button onclick=\"getUserPlaylists('${state.user}')\">Back</button>`];\n  for (let song of data) {\n    console.log(song);\n    let newData = {\n      // the special id for playlist+song combination. \n      // this is the key in the db for the song. the value is the description\n      \"messinaID\": song.messinaId,\n      \"description\": song.description\n    }\n    items.push(`<p class=\"clickable\" onclick=\"playSong('${song.id}')\">${song.name}</p>\n    <div id=\"embed-${song.id}\"></div>\n                <label for=\"song-${song.messinaId}\">description</label>\n                <input type=\"text\" value=\"${song.description}\" name=\"song-${song.messinaId}\" id=\"song-${song.messinaId}\"/>\n                <button onclick=\"setPlaylistSongs('${song.messinaId}', document.getElementById('song-${song.messinaId}').value)\">Submit yo' shit</button>\n      `);\n  }\n  updateMainView(items.join(''));\n}\n\nlet setPlaylistSongs = (id, description) => {\n  let payload = [{ 'id': id, 'description': description }];\n\n  httpPostAsync('/playlist', payload, (data) => { \n  });\n}\n\nlet updateMainView = (content) => {\n  let mainSection = document.querySelectorAll('main#main')[0];\n  mainSection.innerHTML = content;\n}\n\nlet playSong = (songId) => {\n  let iframe = `<iframe src=\"https://open.spotify.com/embed/track/${songId}\" width=\"300\" height=\"380\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>`\n  let embedSection = document.querySelectorAll(`#embed-${songId}`)[0];\n  embedSection.innerHTML = iframe;\n\n}\n","console.log(\"asfd\");\n"]}