{"version":3,"sources":["main.js","components/test.js"],"names":["state","user","list","httpGetAsync","theUrl","callback","httpRequest","XMLHttpRequest","onreadystatechange","readyState","status","data","responseText","open","send","httpPostAsync","payload","setRequestHeader","JSON","stringify","kendall_user","kendall_playlist","sam_user","getUserPlaylists","updateUserPlaylistsView","items","parse","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","playlist","value","push","id","name","err","return","updateMainView","join","updateInitialView","updatePlaylistSongsView","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","song","messinaId","description","setPlaylistSongs","content","document","querySelectorAll","innerHTML","playSong","songId","iframe","findGetParameter","parameterName","result","tmp","location","search","substr","split","forEach","item","decodeURIComponent","window","pathname","console","log"],"mappings":"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","file":"main.min.js","sourcesContent":["let state = {\n  user: '',\n  list: ''\n}\n\n\nfunction httpGetAsync(theUrl, callback) { //theURL or a path to file\n  var httpRequest = new XMLHttpRequest();\n  httpRequest.onreadystatechange = function() {\n    if (httpRequest.readyState == 4 && httpRequest.status == 200) {\n      var data = httpRequest.responseText;  //if you fetch a file you can JSON.parse(httpRequest.responseText)\n      if (callback) {\n        callback(data);\n      }                   \n    }\n  };\n\n  httpRequest.open('GET', theUrl, true); \n  httpRequest.send(null);\n}\n\n\nfunction httpPostAsync(theUrl, payload, callback) { //theURL or a path to file\n  var httpRequest = new XMLHttpRequest();\n  httpRequest.onreadystatechange = function() {\n    if (httpRequest.readyState == 4 && httpRequest.status == 200) {\n      var data = httpRequest.responseText;  //if you fetch a file you can JSON.parse(httpRequest.responseText)\n      if (callback) {\n        callback(data);\n      }                   \n    }\n  };\n\n  httpRequest.open('POST', theUrl, true); \n  httpRequest.setRequestHeader('Content-Type', 'application/json');\n  httpRequest.send(JSON.stringify({payload: payload}));\n}\n\nconst kendall_user = 'kwatch90210';\nconst kendall_playlist = '2nrEA3uA0oD23f5KuRUu7u';\n\nconst sam_user = 'smessina';\n\n\nlet getUserPlaylists = (user) => {\n  switch(user) {\n    case 'sam':\n      user = sam_user;\n      break;\n    case 'kendall':\n      user = kendall_user;\n      break;\n    default:\n      break\n  }\n  state.user = user;\n  updateUserPlaylistsView();\n}\n\nlet updateUserPlaylistsView = () => {\n  httpGetAsync(`/playlists?user=${state.user}`, function(data) {\n    let items = [];\n    data = JSON.parse(data).items;\n\n    for (let playlist of data) {\n      items.push(`<p><a href=\"/songs?user=${state.user}&list=${playlist.id}\" >${playlist.name}</a></p>`);\n    }\n    updateMainView(items.join(''));\n  });\n}\n\nlet updateInitialView = () => {\n  updateMainView(`\n      <a href=\"/lists?user=${sam_user}\" >\n       <button>Sam</button>\n     </a>\n     <br />\n      <a href=\"/lists?user=${kendall_user}\" >\n       <button>Kendall</button>\n     </a>\n  `);\n}\n\nlet updatePlaylistSongsView = () => {\n  httpGetAsync(`/playlist?user=${state.user}&list=${state.list}`, function(data) {\n    let items = [];\n    data = JSON.parse(data);\n    for (let song of data['items']) {\n      let newData = {\n        // the special id for playlist+song combination. \n        // this is the key in the db for the song. the value is the description\n        \"messinaID\": song.messinaId,\n        \"description\": song.description\n      }\n      items.push(`\n    <div>\n      <p class=\"clickable\" onclick=\"playSong('${song.id}')\">${song.name}</p>\n    <div>\n    <div id=\"embed-${song.id}\"></div>\n                <label for=\"song-${song.messinaId}\">description</label>\n                <input type=\"text\" value=\"${song.description}\" name=\"song-${song.messinaId}\" id=\"song-${song.messinaId}\"/>\n                <button onclick=\"setPlaylistSongs('${song.messinaId}', document.getElementById('song-${song.messinaId}').value)\">Submit yo' shit</button>\n    </div>\n    </div>\n      `);\n    }\n    updateMainView(items.join(''));\n  });\n}\n\nlet setPlaylistSongs = (id, description) => {\n  let payload = [{ 'id': id, 'description': description }];\n\n  httpPostAsync('/playlist', payload, (data) => { \n  });\n}\n\nlet updateMainView = (content) => {\n  let mainSection = document.querySelectorAll('main#main')[0];\n  mainSection.innerHTML = content;\n}\n\nlet playSong = (songId) => {\n  let iframe = `<iframe src=\"https://open.spotify.com/embed/track/${songId}\" width=\"300\" height=\"380\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>`\n  let embedSection = document.querySelectorAll(`#embed-${songId}`)[0];\n  embedSection.innerHTML = iframe;\n\n}\n\n\n\n\n\nfunction findGetParameter(parameterName) {\n  var result = null,\n    tmp = [];\n  location.search\n    .substr(1)\n    .split(\"&\")\n    .forEach(function (item) {\n      tmp = item.split(\"=\");\n      if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);\n    });\n  return result;\n}\n\n(() => {\n  switch (window.location.pathname) {\n    case '/':\n      document.querySelectorAll('body')[0].id = 'home';\n      //updateInitialView();\n      break;\n    case '/lists':\n      document.querySelectorAll('body')[0].id = 'lists';\n      state.user = findGetParameter('user');\n      updateUserPlaylistsView();\n      break;\n    case '/songs':\n      document.querySelectorAll('body')[0].id = 'songs';\n      state.user = findGetParameter('user');\n      state.list = findGetParameter('list');\n      updatePlaylistSongsView();\n      break;\n    default:\n      break;\n  }\n\n})()\n","console.log(\"asfd\");\n"]}